generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId       String        @unique
  email         String        @unique
  firstname     String?       @unique
  lastname      String?       @unique
  createdAt     DateTime      @default(now())

  subscription  Subscription?
  integrations  Integrations[]
  automations   Automation[]
}

model Subscription {
  id            String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?             @unique @db.Uuid
  plan          SUBSCRIPTION_PLAN   @default(FREE)
  customerId    String?             @unique
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now())

  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Integrations {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          INTEGRATIONS  @default(INSTAGRAM)
  userId        String?       @unique @db.Uuid
  token         String        @unique
  expiresAt     DateTime?
  instagramId   String?       @unique
  createdAt     DateTime      @default(now())

  User          User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Automation {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @default("Untitled")
  active    Boolean   @default(false)
  trigger   Trigger[]
  listener  Listener?
  posts     Post[]
  dms       Dms[]
  userId    String?   @unique @db.Uuid
  keywords  Keyword[]
  createdAt DateTime  @default(now())

  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Dms {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  automationId    String?   @unique @db.Uuid
  senderId        String?
  receiverId      String?
  message         String?
  createdAt       DateTime  @default(now())

  Automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
}

model Post {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId          String
  caption         String?
  media           String
  mediaType       MEDIA_TYPE  @default(IMAGE)
  automationId    String?     @unique @db.Uuid

  Automation      Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
}

model Listener {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  automationId    String     @unique @db.Uuid
  listener        LISTENERS   @default(MESSAGE)
  prompt          String
  commentReply    String?
  dmCount         Int         @default(0)
  commentCount    Int         @default(0)

  Automation      Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
}

model Trigger {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type          String
  automationId  String?     @unique @db.Uuid

  Automation    Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
}

model Keyword {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word            String
  automationId    String?       @db.Uuid

  Automation      Automation?   @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@unique([automationId, word])
}


enum SUBSCRIPTION_PLAN {
  FREE
  PRO
}

enum INTEGRATIONS {
  INSTAGRAM
}

enum MEDIA_TYPE {
  IMAGE
  VIDEO
  CAROUSEL_ALBUM
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}